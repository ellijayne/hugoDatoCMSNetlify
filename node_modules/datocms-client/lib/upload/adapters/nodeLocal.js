"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = nodeLocal;

var _request = _interopRequireDefault(require("request"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _denodeify = _interopRequireDefault(require("denodeify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stat = (0, _denodeify.default)(_fs.default.stat);

function uploadToS3(url, filePath, size) {
  return new Promise(function (resolve, reject) {
    var req = _request.default.put({
      url: url,
      headers: {
        'x-amz-acl': 'public-read',
        'content-length': size
      }
    }).on('response', function (res) {
      if (res.statusCode === 200) {
        resolve();
      } else {
        reject(new Error("Invalid status code: ".concat(res.statusCode)));
      }
    }).on('error', reject);

    _fs.default.createReadStream(filePath).pipe(req);
  });
}

function nodeLocal(client, filePath) {
  var format = _path.default.extname(filePath).slice(1);

  return stat(filePath).then(function (_ref) {
    var size = _ref.size;
    return client.uploadRequest.create({
      filename: _path.default.basename(filePath)
    }).then(function (_ref2) {
      var id = _ref2.id,
          url = _ref2.url;
      return {
        id: id,
        url: url,
        size: size
      };
    });
  }).then(function (_ref3) {
    var id = _ref3.id,
        url = _ref3.url,
        size = _ref3.size;
    return uploadToS3(url, filePath, size).then(function () {
      return {
        path: id,
        size: size,
        format: format
      };
    });
  });
}