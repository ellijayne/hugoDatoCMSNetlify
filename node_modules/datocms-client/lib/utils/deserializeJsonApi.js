"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deserializeJsonApi;

var _humps = require("humps");

var _jsonSchemaRelationships = _interopRequireDefault(require("./jsonSchemaRelationships"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function deserialize(relationshipsMeta, _ref) {
  var id = _ref.id,
      attributes = _ref.attributes,
      meta = _ref.meta,
      relationships = _ref.relationships;
  var result = {
    id: id
  };

  if (meta) {
    result.meta = meta;
  }

  Object.assign(result, attributes);

  if (relationships) {
    relationshipsMeta.forEach(function (_ref2) {
      var relationship = _ref2.relationship,
          collection = _ref2.collection,
          types = _ref2.types;

      if (relationships[(0, _humps.camelize)(relationship)]) {
        var relData = relationships[(0, _humps.camelize)(relationship)].data;
        var value;

        if (types.length > 1) {
          value = relData;
        } else if (!relData) {
          value = null;
        } else if (collection) {
          value = relData.map(function (x) {
            return x.id;
          });
        } else {
          value = relData.id;
        }

        result[(0, _humps.camelize)(relationship)] = value;
      }
    });
  }

  return result;
}

function deserializeJsonApi(link, json) {
  if (!json) {
    return json;
  }

  var relationshipsMeta = (0, _jsonSchemaRelationships.default)(link.targetSchema);
  var data = json.data;

  if (Array.isArray(data)) {
    return data.map(function (item) {
      return deserialize(relationshipsMeta, item);
    });
  }

  return deserialize(relationshipsMeta, data);
}